<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="spring-integration">
  <title>C24 IO support for Spring Integration</title>

  <abstract>
    <para>Spring Integration provides an extension of the Spring programming
    model to support the well-known <ulink
    url="http://www.eaipatterns.com/">Enterprise Integration Patterns</ulink>
    . C24 IO components for Spring Integration makes C24 marshaling and
    transformation directly usable as Spring Integration components.</para>
  </abstract>

  <section id="si-intro">
    <title>Introduction</title>

    <para>C24 IO Spring Integration support extends the Spring Integration
    Core with implementations of transformers, selector and routers designed
    to make working with C24 IO Complex Data Object messages in Spring
    Integration simple. The provided messaging components are designed to work
    with any data represented as a ComplexDataObject.</para>

    <para>Also provided are unmarshaling and marshalling transformers for
    turning String or byte type payloads into C24 IO Complex Data Objects, and
    turning CDOs back into <classname>String</classname>s or bytes. We're
    using transformer to mean Spring Integration transformer, not an IO
    transform.</para>

    <para>This guide will emphasise the use of Spring XML namespaces to
    configure C24 IO Spring components. The namespaces are configured like
    this: <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:int="http://www.springframework.org/schema/integration"
  xmlns:int-c24="http://schema.c24.biz/spring-integration"
  xsi:schemaLocation="http://www.springframework.org/schema/integration 
    http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
    http://schema.c24.biz/schema/spring-integration 
    http://schema.c24.biz/spring-integration.xsd
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

&lt;/beans&gt;</programlisting></para>
  </section>

  <section id="unmarshalling">
    <title>Unmarshalling Payloads</title>

    <para>This section will explain how to use the unmarshalling (parsing)
    capabilities of C24 IO within the Spring Integration Framework. The basis
    for C24 IO unmarshalling is the <classname>Source</classname> class. In
    Spring Integration, unmarshalling is implemented as a Spring Integration
    <interfacename>Transformer</interfacename>.</para>

    <section id="unmarshalling-namespace">
      <title>Using the XML namespace</title>

      <para>Configuring an unmarshalling transformer using the namespace:
      <programlisting language="xml">&lt;int-c24:unmarshalling-transformer
  source-factory-ref="textualSourceFactory"
  model-ref="inputDocumentModel"
  input-channel="…"
  output-channel="…" /&gt;</programlisting></para>

      <para>Two specific attributes are required. The
      <emphasis>source-factory-ref</emphasis> is a
      <interfacename>SourceFactory</interfacename> defined as a bean elsewhere
      in the XML config. There are many
      <interfacename>SourceFactory</interfacename> implementations, each
      wrapping a C24 IO <classname>Source</classname> implementation. E.g. the
      is a <classname>XmlSourcefactory</classname> , a
      <classname>TextualSourceFactory</classname> and a
      <classname>FixSourceFactory</classname> .</para>

      <para>The second attribute is a <emphasis>model-ref</emphasis> . When
      unmarshalling, you must configure which
      <classname>ComplexDataObject</classname> derived class you want to
      create. Typically, this is clear from the use case, such as when
      receiving a message on a specific MQ queue, or to a specific WebService
      endpoint. Please see <xref linkend="core.model" /> for information about
      configuring a model.</para>
    </section>

    <section id="unmarshalling-input">
      <title>Input to the Unmarshalling Transformer</title>

      <para>These are the message payloads supported by the unmarshalling
      transformer. They will be passed to the C24
      <classname>Source</classname> either as a
      <interfacename>Reader</interfacename> (you can't control the encoding)
      or a <interfacename>InputStream</interfacename> (you can configure the
      encoding on the <classname>SourceFactory</classname> ). <itemizedlist
          spacing="compact">
          <listitem>
            <para><interfacename>Reader</interfacename> - will be passed
            as-is.</para>
          </listitem>

          <listitem>
            <para><classname>String</classname> - will be passed as a
            <classname>StringReader</classname> .</para>
          </listitem>

          <listitem>
            <para><interfacename>InputStream</interfacename> - will be passed
            as-is.</para>
          </listitem>

          <listitem>
            <para><classname>byte[]</classname> - will be passed as a
            <classname>ByteArrayInputStream</classname> .</para>
          </listitem>

          <listitem>
            <para><classname>File</classname> - will be passed as a
            <classname>FileInputStream</classname> .</para>
          </listitem>
        </itemizedlist></para>

      <para>The actual unmarshalling is determined by the C24
      <classname>Source</classname> that is used. The package
      <classname>biz.c24.io.spring.source</classname> holds a number of
      <interfacename>SourceFactory</interfacename> implementations that wrap
      different C24 Sources. All the configuration properties that you would
      usually find on the Source subclass (such as
      <methodname>setEncoding()</methodname> ) is available on the individual
      <classname>SourceFactory</classname> implementations.</para>

      <para>The source factories are configured as beans, like so:
      <programlisting language="xml">&lt;bean id="textualSourceFactory" class="biz.c24.io.spring.source.TextualSourceFactory"&gt;
  &lt;property name="encoding" value="UTF-8"/&gt;
&lt;/bean&gt;</programlisting></para>
    </section>
  </section>

  <section id="marshalling">
    <title>Marshalling with C24 Sinks</title>

    <para>This section will explain how to use the marshalling capabilities of
    C24 IO within the Spring Integration Framework. The basis for C24 IO
    marshalling is the <classname>Sink</classname> classes. In Spring
    Integration, marshalling is implemented as a Spring Integration
    <interfacename>Transformer</interfacename>.</para>

    <section id="marshalling-namespace">
      <title>Marshalling using the XML namespace</title>

      <para>A marshalling <interfacename>Transformer</interfacename> is
      configured like this: <programlisting language="xml">&lt;int-c24:marshalling-transformer
  input-channel="…" 
  output-channel="…"
  sink-factory="xmlSinkFactory"
  output-type="BYTE_ARRAY" /&gt;</programlisting>The sink-factory is a
      reference to a <interfacename>SinkFactory</interfacename> that is
      defined as a bean. The <code>output-type</code> is an enum vale that
      determines if the output is a <classname>String</classname> or a byte
      array.</para>
    </section>

    <section id="marshalling-output">
      <title>Output options for the marshalling transformer</title>

      <para>The actual marshalling is determined by the C24
      <classname>Sink</classname> that is used. The package
      <classname>biz.c24.io.spring.sink</classname> holds a number of
      <interfacename>SinkFactory</interfacename> implementations that wrap
      different C24 sinks. All the configuration properties that you would
      usually find on the Sink subclass (such as
      <methodname>setEncoding()</methodname> ) is available on the individual
      <interfacename>SinkFactory</interfacename> implementations.</para>

      <para>The output type determines what kind of payload will be output
      from the marshaling transformer. <itemizedlist spacing="compact">
          <listitem>
            <para><emphasis>STRING</emphasis> will output a
            <classname>String</classname> as the payload. It's up to the user
            to determine if that makes sense given the chose Sink type.</para>
          </listitem>

          <listitem>
            <para><emphasis>BYTE_ARRAY</emphasis> will output a
            <classname>byte[]</classname> as the payload. It's up to you to
            determine if that makes sense given the chose Sink type. Configure
            the encoding on the <interfacename>SinkFactory</interfacename>
            .</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <!-- TODO <section id="marshalling-bean-config"></section> -->
  </section>
  <section>
    <title>Validation</title>
    <para>There are a number of options for validating unmarshalled ComplexDataObjects and for
      determining how processing continues in the event of a validation failure. This section
      introduces the relevant components and shows how they can be used to control message
      flow.</para>
    <section>
      <title>Simple Pass/Reject Processing</title>
      <para>If you simply need to filter out invalid messages, this can most easily be achieved by
        combining the <classname>C24ValidatingMessageSelector</classname> with a standard Spring
        Integration <interfacename>Filter</interfacename>. At its most straight-forward this can be
        used as:</para>
      <para>
        <programlisting language="xml">&lt;int-c24:validating-selector id="c24Validator"/>
	
&lt;int:filter input-channel="..." output-channel="..." ref="c24Validator"/></programlisting>
      </para>
      <para>The filter will route all messages containing valid ComplexDataObjects to the specified
        output channel, while messages containing invalid <classname>ComplexDataObject</classname>s
        will silently be dropped.</para>
      <para>The handling behaviour for invalid <classname>ComplexDataObject</classname>s can be
        influenced by:</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>Setting the <emphasis>discard-channel</emphasis> attribute on the filter. All
              invalid messages will now be delivered to this channel, however the message will
              contain no details on why the object failed validation.</para>
          </listitem>
          <listitem>
            <para>Setting the <emphasis>throw-exception-on-rejection</emphasis> attribute on the
              filter. This will cause Spring Integration to throw an exception which will bubble
              back up through the Spring Integration flow until it is handled (for example by a
                <interface>Gateway</interface> with a configured
              <emphasis>error-channel</emphasis>). Again, as this exception is thrown by core Spring
              Integration components it will not contain any details on why the object failed
              validation.</para>
          </listitem>
          <listitem>
            <para>Setting the <emphasis>throw-exception-on-rejection</emphasis> attribute on the
              Validating Selector. This will also cause an exception to be thrown on a validation
              failure however as the exception is generated by the validating component, it can
              optionally contain information on why the object failed validation.</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>The behaviour in this latter case depends on the value of the
          <emphasis>fail-fast</emphasis> attribute on the selector:</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>If it is set to <emphasis>"true"</emphasis> then validation will stop on the first
              failure and a <classname>MessageRejectedException</classname> will be thrown, with the
                <classname>ValidationException</classname> that aborted the processing embedded as
              its cause.</para>
          </listitem>
          <listitem>
            <para>If it is set to <emphasis>"false"</emphasis> then the object will be fully
              validated and a <classname>C24AggregatedMessageValidationException</classname> will be
              thrown which contains all validation events.</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>For example, the following flow will cause the selector to throw a
          <classname>C24AggregatedMessageValidationException</classname> containing all validation
        events from a full validation of the <classname>ComplexDataObject</classname> in the
        message:</para>
      <para>
        <programlisting language="xml">&lt;int-c24:validating-selector id="c24Validator" throw-exception-on-rejection="true" fail-fast="false" />
	
&lt;int:filter input-channel="..." output-channel="..." ref="c24Validator"/></programlisting>
      </para>
      <para>This exception will be wrapped by the filter before being rethrown however the embedded
        exception can be extracted for processing in any error handling flows.</para>
    </section>
    <section>
      <title>Detailed Validation Failure Processing 'In-Flow'</title>
      <para>In certain cases you might wish to use detailed validation failure information in your
        main flow, rather than throwing an exception to be handled by an earlier component in the
        flow. For these cases, a validating header enricher is provided:</para>
      <para>
        <programlisting language="xml">&lt;int-c24:validating-header-enricher 
  input-channel="..." 
  output-channel="..."
  fail-events="true"
  pass-events="false" 
  statistics="false"/></programlisting>
      </para>
      <para>This component will add the following headers to a
        <interface>Message</interface>:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis>c24_valid</emphasis>. A boolean value which is set to true if the object
            passes validation and false otherwise.</para>
        </listitem>
        <listitem>
          <para><emphasis>c24_failEvents</emphasis> (if <emphasis>fail-events</emphasis> is set to
            true). A <interface>Collection</interface> of <classname>ValidationEvent</classname>s
            which caused the object to fail validation.</para>
        </listitem>
        <listitem>
          <para><emphasis>c24_passEvents</emphasis> (if <emphasis>pass-events</emphasis> is set to
            true). A <interface>Collection</interface> of <classname>ValidationEvent</classname>s
            resulting from any successful validations.</para>
        </listitem>
        <listitem>
          <para><emphasis>c24_statistics</emphasis> (if <emphasis>statistics</emphasis> is set to
            true). An iO <classname>ValidationStatisics</classname> object containing a summary of
            validation passes and failures for the message.</para>
        </listitem>
      </itemizedlist>
      <para>These headers can be used with filters and routers to create fine-grained flows
        depending on the nature of the validation failure. In the example below, valid messages flow
        straight through the chain. Invalid messages are handed off to the router which looks to see
        if any of the validation failures were due to the 'Counterparty' field; if so then the
        message is routed to the invalidCounterpartyChannel, otherwise it is routed to the
        unclassifiedErrorChannel. Obviously this is a very simple example and far more complex
        routing logic is possible:</para>
      <para>
        <programlisting language="xml">&lt;int:chain input-channel="..." output-channel="...">
  &lt;int-c24:validating-header-enricher fail-events="true" pass-events="false" statistics="false"/>
  &lt;int:filter expression="headers[c24_valid]" discard-channel="routeErrorChannel"/>
&lt;/int:chain>

...
	
&lt;int:router input-channel="routeErrorChannel" expression="headers[c24_failEvents].?[FieldName == 'Counterparty'].size() > 0">
  &lt;int:mapping value="true" channel="invalidCounterpartyChannel"/>
  &lt;int:mapping value="false" channel="unclassifiedErrorChannel"/>
&lt;/int:router>
</programlisting>
      </para>
    </section>
  </section>

  <section id="transformation">
    <title>Using C24 Transforms</title>

    <section id="transformation-namespace">
      <title>Configuring C24 Transforms using the XML namespace</title>

      <para><programlisting language="xml">&lt;int-c24:transformer
  transform-class="biz.c24.io.examples.transforms.basic.ExampleTransform"
  target-class="…"
  input-channel="…"
  output-channel="…"
  always-return-array="false" /&gt;</programlisting></para>

      <para>The attributes to configure are: <itemizedlist spacing="compact">
          <listitem>
            <para><emphasis>transform-class</emphasis> - the class name of the
            C24 IO generated transform.</para>
          </listitem>

          <listitem>
            <para><emphasis>always-return-array</emphasis> - if you want the output to always be an
              array, even if only a single object was the output from the transform. See
              below.</para>
          </listitem>
          <listitem>
            <para><emphasis>target-class</emphasis> - the target class to convert to; if unset the
              ComplexDataObject derived type specified in the transform class will be used.</para>
          </listitem>
        </itemizedlist></para>
      <para>The <emphasis>target-class</emphasis> attribute allows the transformer to transform
        directly to a Java Bean whose properties match those of the target model. For example, if
        the target model was generated by importing a Java class, the transformer could return this
        type directly as opposed to the ComplexDataObject derived type that was created from it.
        Please note that if the target-class is not derived from ComplexDataObject, downstream C24
        Spring Integration components which expect the message payload to be a ComplexDataObject
        (such as the XPath router) cannot be used.</para>
    </section>

    <section id="transformation-input">
      <title>Input payloads</title>

      <para>The Spring Integration IO transformer only accepts a single
      <classname>Object</classname> as the input payload. In effect, this
      should be of a <classname>ComplexDataObject</classname> subclass.</para>
    </section>

    <section id="transformation-output">
      <title>Output payload</title>

      <para>The result of transforming a single object (see above) can either
      be a single object, or an array of objects. The default is to only
      output a single <classname>ComplexDataObject</classname> as the payload.
      If the transform yields more then one object, or if the attribute
      <emphasis>always-return-array</emphasis> is set to true, then an
      <classname>Object[]</classname> will be the payload.</para>
      <para>If the <emphasis>java-class</emphasis> attribute is set, the transformer will attempt to
        transform directly to that type rather than the <classname>ComplexDataObject</classname>
        form.</para>
    </section>

    <!-- TODO <section id="transformation-bean-config"></section> -->
  </section>

  <section id="xpath">
    <title>Using C24 XPath</title>

    <para>C24 IO has excellent XPath capabilities, and specifically any
    <classname>ComplexDataObject</classname> can be queries using XPath. The
    following components leverage that capability by providing Spring
    Integration routers, selectors (for filters) and transformers. A common
    trait is that they either take a simple XPath statement as a String, or a
    reference to a XPath Statement defined using a standard Spring
    bean.</para>

    <section id="xpath-statements">
      <title>XPath Statements as Beans</title>

      <para>In some cases, an XPath statement cannot be expressed just as a
      simple string. A good example is if it needs to navigate and
      differentiate between more than one namespace. If so, you can declare
      and configure a C24 Xpath Statement.<classname></classname></para>

      <!-- TODO Revise when we have namespace. -->
    </section>

    <section id="xpath-transformation">
      <title>Transforming Objects using XPath</title>

      <subtitle>Picking out parts of a larger structure using XPath</subtitle>

      <para><programlisting language="xml">&lt;int-c24:xpath-transformer input-channel="…"
  evaluation-type="OBJECT_RESULT"
  xpath-statement="/Emails"
  output-channel="…" /&gt;</programlisting></para>

      <para>The input to the transformer must always be a subclass of
      <classname>ComplexDataObject.</classname> <itemizedlist
          spacing="compact">
          <listitem>
            <para><emphasis>evaluation-type</emphasis> determines the type of
            the output payload. Options include <classname>Object</classname>,
            <classname>String</classname>, <classname>boolean</classname> and
            list (for selecting more than one node). See the enum
            <classname>biz.c24.io.spring.integration.xpath.XPathEvaluationType</classname>
            for details.</para>
          </listitem>

          <listitem>
            <para><emphasis>xpath-statement</emphasis> is used to provide a
            simple XPath expression as a string.</para>
          </listitem>

          <listitem>
            <para><emphasis>xpath-statement-ref</emphasis> is used to provide
            a reference to an XPath statement declared as a bean
            elsewhere.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section id="xpath-router">
      <title>Routing using XPath</title>

      <para><programlisting language="xml">&lt;int-c24:xpath-router input-channel="…"
  xpath-statement="//Employee[1]/FirstName" default-output-channel="wrongChannel"&gt;
  &lt;int-c24:mapping value="Andy" channel="rightChannel" /&gt;
  &lt;int-c24:mapping value="Barry" channel="anotherChannel" /&gt;
&lt;/int-c24:xpath-router&gt;</programlisting></para>

      <para>The input to the router must always be a subclass of
      <classname>ComplexDataObject</classname> . <itemizedlist
          spacing="compact">
          <listitem>
            <para><emphasis>xpath-statement</emphasis> is used to provide a
            simple XPath expression as a string.</para>
          </listitem>

          <listitem>
            <para><emphasis>xpath-statement-ref</emphasis> is used to provide
            a reference to an XPath statement declared as a bean
            elsewhere.</para>
          </listitem>
        </itemizedlist> The provided Xpath <emphasis>must</emphasis> evaluate
      to a string.</para>
    </section>

    <section id="xpath-selector">
      <title>Filtering using XPath</title>

      <para>Filtering can be done either be provining an XPath statement that
      evaluates to a boolean, or by providing both a XPath Statement and a
      String to compare the result to. <programlisting language="xml">&lt;int:filter discard-channel="wrongChannel" ref="boolSelector" /&gt;

&lt;int-c24:xpath-selector id="boolSelector"
  evaluation-result-type="boolean"
  xpath-statement="//Employee/FirstName/text()='Andy'" /&gt;

&lt;int:filter discard-channel="wrongChannel" ref="stringSelector" /&gt;

&lt;int-c24:xpath-selector id="stringSelector"
  evaluation-result-type="string" xpath-statement="//Employee/FirstName"
  string-test-value="Andy" /&gt;</programlisting></para>

      <para>The input to the selector must always be a subclass of
      <classname>ComplexDataObject</classname> . <itemizedlist
          spacing="compact">
          <listitem>
            <para><emphasis>evaluation-result-type</emphasis> determines if
            this is a boolean or String based selector.</para>
          </listitem>

          <listitem>
            <para><emphasis>string-test-value</emphasis> is required by the
            String based selector.</para>
          </listitem>

          <listitem>
            <para><emphasis>xpath-statement</emphasis> is used to provide a
            simple XPath expression as a string.</para>
          </listitem>

          <listitem>
            <para><emphasis>xpath-statement-ref</emphasis> is used to provide
            a reference to an XPath statement declared as a bean
            elsewhere.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section id="xpath-header-enricher">
      <title>XPath Header enricher</title>

      <para>Before passing a <classname>ComplexDataObject</classname> payload
      to a channel adapter or similar, it is often needed to pick out certain
      data and put it into named headers. For this use case, there is an XPath
      header enricher. <programlisting language="xml">&lt;int-c24:xpath-header-enricher input-channel="…" output-channel="…"&gt;
  &lt;int-c24:header name="firstName" xpath-statement="//Employee/FirstName" /&gt;
  &lt;int-c24:header name="lastName" xpath-statement="//Employee/LastName" /&gt;
&lt;/int-c24:xpath-header-enricher&gt;</programlisting>Note that several
      headers can be enriched at the same time. The XPath expressions will be
      evaluated into Strings. No other data type is currently
      supported.</para>
    </section>
  </section>
</chapter>